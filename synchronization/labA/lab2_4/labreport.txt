2.4. Сделайте “грубую” реализацию спинлока и мутекса при помощи cas-функции и
    futex. Используйте их для синхронизации доступа к разделяемому ресурсу. Объясните
    принцип их работы.

    ? mutex vs spinlock
    -   mutex 
            когда поток пытается захватить заблокированный мьютекс:
                он блокируется и переводится в состояние ожидания (sleep)
                управление передается ядру ОС -> не тратит CPU
            когда мьютекс освобождается (какой-то второй поток который держал мьютекс его разблокирует):
                ОС пробуждает наш ожидающий поток (wake up)
                при получении кванта времени поток продолжит выполнение
            ! использует сискол futex -> требуется переключение контекста. (НО не потребляет CPU пока спит)

        spinlock
            когда поток пытается захватить заблокированный спинлок:
                поток продолжает в цикле проверять состояние лока и пытается заблокировать (значит другой поток не может занять его место)
                не освобождает CPU
            ! работает полностью в user space -> не требует переключения контекста
            ! 100% загрузка ядра CPU из-за цикла ожидания блокировки

        обобщение:
            при заблокированном мьютексе поток переводится в сон; при заблокированном локе поток постоянно пытается заблокировать.
            мьютекс использует сисколы, спинлок - нет. 
            при спящем мьютексе ОС передает ядро активному потоку, при спинлоке долбящийся поток продолжит занимать ядро.

        ответ: https://stackoverflow.com/questions/5869825/when-should-one-use-a-spinlock-instead-of-mutex

    1) кастомный спинлок
        в терминале пишу:
            cd custom_spinlock
            gcc main.c queue.c myspinlock.c -o res && ./res
        

    2) кастомный мутекс
        в терминале пишу:
            cd custom_mutex
            gcc main.c queue.c mymutex.c -o res && ./res

        futex - fast userspace mutex - механизм синхронизации, позволяет случае работать без перехода в ядро 
            (через атомарные CAS‑операции в userspace) и только при конкуренции использовать один сискол для сна/пробуждения.
            int futex(int *uaddr, int op, int val, const struct timespec *timeout, int *uaddr2, int val3);
                uaddr - адрес в userspace переменной, с которой работают потоки
                op - операция: FUTEX_WAIT, FUTEX_WAKE
                    FUTEX_WAIT - ждет, пока значение uaddr станет равным val
                    FUTEX_WAKE - пробуждает, если значение uaddr меньше val (val - максимальное количество потоков для пробуждения)
                val - значение, которое должно быть установлено в uaddr
                timeout - время ожидания, если op = FUTEX_WAIT
                uaddr2 - не используется
                val3 - не используется

        я взял большую часть кода из lab2_3. Из нового только mymutex.c:
            int futex_wait(atomic_int *uaddr, int val) 
                если по адресу uaddr лежит val, засунь меня в список спящих потоков; разбуди меня, 
                    когда кто‑то вызовет FUTEX_WAKE():
                return syscall(SYS_futex, uaddr, FUTEX_WAIT, val, NULL, NULL, 0);

            int futex_wake(atomic_int *uaddr, int n)
                разбуди до n спящих потоков, которые ждут на этом адресе uaddr:
                return syscall(SYS_futex, uaddr, FUTEX_WAKE, n, NULL, NULL, 0);

            void custom_mutex_init(custom_spinlock_t *s)

            void custom_mutex_lock(custom_spinlock_t *s)
                если поток не может захватить мьютекс (он уже 1 <-> захвачен), то делаю futex_wait() <-> засыпаю, пока 
                    значение в *uaddr не станет другим благодаря другим потокам.

                atomic_compare_exchange_strong
                    bool atomic_compare_exchange_strong(volatile atomic_int *object, atomic_int *expected, atomic_int desired)
                        object - указатель на переменную типа atomic_int, которую нужно изменить.
                        expected - указатель на переменную типа atomic_int, содержащую ожидаемое значение.
                        desired - новое значение, которое нужно установить.

                    сравнивает текущее значение атомарной переменной object со значением, указанным в expected. Если они равны, то устанавливает 
                        значение desired в object и возвращает trut. В противном случае, оставляет object без изменений и возвращает false.

                    в моем случае:
                        if (atomic_compare_exchange_strong(&s->lock, &one, 0)) {
                            break;
                        }
                    
                    https://spec-zone.ru/cpp/atomic/atomic_compare_exchange

            void custom_spinlock_unlock(custom_spinlock_t *s) 
                потоки ожидающие на s->lock выполняют futex_wait() и когда мьютекс освобождается, futex_wake() сообщает ОС, что есть поток, 
                    который может продолжить выполнение.
                atomic_store() - снимает мьютекс (s->lock = 0)
                futex_wake() - пробуждает один поток который ожидает на s->lock
            
            пример: поток a захватил мьютекс и работает, 
                    поток b пытается захватить тот же мьютекс и засыпает ожидая с помощью futex_wait(),
                    когда a доработал, вызовется custom_mutex_unlock() и в нем atomic_store() для освобождения мьютекса,
                    затем futex_wake() пробудить один из потоков (b) которые были заблокированы,
                    так как теперь мьютекс освободился, b его захватывает и работает сам. 