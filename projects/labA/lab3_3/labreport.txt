3.3. Реализуйте многопоточный кэширующий HTTP-proxy (версия HTTP 1.0). Прокси
    должен принимать соединения на 80 порту и возвращать данные из кэша. В случае
    если для запроса нет записей в кэше, то должен быть создан отдельный поток,
    который загрузит в кэш требуемые данные. Данные должны пересылаться клиенту как
    только они начали появляться в кэше.

    ? в чем отличие простого сервера от прокси?
    - простой http-сервер сам отвечает на запросы от клиентов.
        Пример работы такого TCP-сервера из lab7task2:
            void handle_client(int client_sock_fd) {
                char buffer[BUFFER_SIZE]; // буфер для приема/отправки данных клиента
                ssize_t bytes_read;
                
                // цикл работает пока присвоенный bytes_read результат работы recv - чтения данных с сокета != 0
                while (bytes_read = recv(client_sock_fd, buffer, BUFFER_SIZE, 0)) {
                    if (bytes_read < 0) {
                        printf("recv failed");
                        break;
                    }
                    buffer[bytes_read] = '\0';
                    printf("получено %s\n", buffer);
                    // эхо-ответ обратно клиенту 
                    // send(client_sock_fd, buffer, bytes_read, 0);
                    if (send_all(client_sock_fd, buffer, bytes_read) < 0) {
                        printf("send_all (send(s)) failed");
                        break;
                    }
                    memset(buffer, 0, BUFFER_SIZE);
                }

                close(client_sock_fd);
                exit(0);
            } 

        прокси принимает соединение и перенаправляет его на требуемый сервер:
            1) принимает полный HTTP-запрос: строка запроса, строка заголовков
            2) парсит заголовок чтобы понять куда перенаправить запрос
            3) сам не формирует ответ а перенаправляет запрос на целевой сервер
            ...
            ?) получает ответ от целевого сервера и пересылает его обратно.



    как запускать: 
        1 терминал: 
            gcc -o proxy proxy_cache.c && sudo ./proxy
        2 терминал: 
            curl -v -x http://localhost:80 http://example.com/



    socket
            int socket (int domain, int type, int protocol)
                domain - cпецификация семейства адресов
                type - cпецификация типа для нового сокета
                protocol - Используемый протокол. 
                    Возможные параметры параметра протокола относятся к указанному семейству адресов и типу сокета. 

            в моем случае:
                socket(AF_INET, SOCK_DGRAM, 0)
                    AF_INET - cемейство адресов IPv4 
                    SOCK_STREAM - тип сокета, который предоставляет виртуационные, надежные двусторонние потоки байтов на основе подключений 
                        с механизмом передачи данных OOB. Этот тип сокета использует протокол TCP  
                    0 - вызывающий объект не хочет указывать протокол, и поставщик услуг выберет протокол для использования

            https://learn.microsoft.com/ru-ru/windows/win32/api/winsock2/nf-winsock2-socket
            https://www.opennet.ru/docs/RUS/linux_base/node245.html

    struct sockaddr_in
        struct sockaddr_in {
            sa_family_t     sin_family;     /* AF_INET */
            in_port_t       sin_port;       /* Port number */
            struct in_addr  sin_addr;       /* IPv4 address */
        };

        в моем случае: 
            сервер: 
                server_addr.sin_family = AF_INET; // IP адрес к которому будет привязан сокет (IPv4)
                server_addr.sin_port = htons(PORT); // номер порта к которому будет привязан сокет
            клиент: 
                server_addr.sin_family = AF_INET;
                server_addr.sin_port = htons(PORT);

        Структура sockaddr_in описывает сокет для работы с протоколами IP. 
            Значение поля sin_family всегда равно AF_INET.
            Поле sin_port содержит номер порта который намерен занять процесс. 
                Если значение этого поля равно нулю, то операционная система сама выделит свободный номер порта для сокета. 
            Поле sin_addr типа структуры in_addr, содержит IP адрес к которому будет привязан сокет.
                Структура in_addr содержит поле s_addr. Этому полю можно присвоить 32х битное значение IP адреса. 

        https://www.opennet.ru/docs/RUS/socket/node4.html
        https://man7.org/linux/man-pages/man3/sockaddr.3type.html
        https://learn.microsoft.com/ru-ru/windows/win32/api/ws2def/ns-ws2def-sockaddr_in

    htons
        uint16_t htons(uint16_t hostshort);
        Функция htons() преобразует узловой порядок расположения байтов 
            положительного короткого целого hostshort в сетевой порядок расположения байтов.
        
        https://www.opennet.ru/man.shtml?topic=htons&category=3&russian=0

    bind
        int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen)
            sockfd - дескриптор, определяющий несвязанный сокет, ему мы функцией bind задаем адрес
            addr - указатель на структуру sockaddr локального адреса, назначаемого связанному сокету
            addrlen - длина (в байтах) значения, на которое указывает addr

        в моем случае: 
            bind(server_fd, (struct sockaddr*)&server_addr, sizeof(server_addr))

        функция используется сервером для присваивания сокету имени. До выполнения функции bind (т.е. присваивания 
            какого-либо имени, вид которого зависит от адресного домена) сокет недоступен программам-клиентам.

        https://learn.microsoft.com/ru-ru/windows/win32/api/winsock/nf-winsock-bind
        https://www.opennet.ru/docs/RUS/linux_base/node246.html

    listen
        int listen(int s, int backlog)
            s - сокет для прослушивания 
            backlog - целое положительное число, определяющее, как много запросов связи может быть принято на сокет одновременно.

        Функция listen используется сервером, чтобы информировать ОС, что он ожидает ("слушает") запросы связи на данном сокете. 
            Без такой функции всякое требование связи с этим сокетом будет отвергнуто.

        в моем случае: 
            listen(server_fd, 5)

        https://www.opennet.ru/docs/RUS/linux_base/node247.html#:~:text=Функция%20listen%20используется%20сервером%2C%20чтобы,int%20s%2C%20int%20backlog

    accept
        int accept(int s, char * name, int* anamelen)
            s - сокет-дескриптор для принятия связей от клиентов
            name - указатель на адрес клиента (структура sockaddr) для соответствующего домена
            anamelen - указатель на целое число - длину структуры адреса

        Функция используется сервером для принятия связи на сокет. Сокет должен быть уже слушающим в момент вызова функции. 
            Если сервер устанавливает связь с клиентом, то функция accept возвращает новый сокет-дескриптор, 
            через который и происходит общение клиента с сервером.
        Если сервер не интересуется адресом клиента, в качестве второго и третьего аргументов можно задать NULL-указатели.

        в моем случае:
            accept(server_fd, (struct sockaddr*)&client_addr, &client_len)

        https://opennet.ru/docs/RUS/linux_base/node248.html#:~:text=Эта%20функция%20используется%20сервером%20для,происходит%20общение%20клиента%20с%20сервером

    pthread_create
        int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void*), void *arg);
            *thread - указатель на объект pthread_t, который инициализируется.
            *attr - указатель на набор атрибутов потока в виде объекта pthread_attr_t. Если атрибуты не нужны, можно передать NULL.
            *start_routine - указатель на функцию, которая запускается в потоке. Подобная функция должна принимать в качестве параметра 
                указатель void*, вместо которого можно передать указатель на любой объект. Однако допускается только один аргумент. 
                Соответственно если надо передать несколько значений, то можно оформить их в массив или структуру.
            *arg: указатель void*, через который передается значение в запускаемую функцию.
        
        создает новый поток, с атрибутами, заданными в attr, и запускает в нем функцию start_routine с аргументом arg.

        в моем случае: 
            pthread_create(&tid, NULL, handle_connection, data)

        https://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_create.html
        https://metanit.com/c/tutorial/11.1.php

    pthread_detach
        int pthread_detach(pthread_t thread);
            thread - идентификатор потока, который необходимо отделить (перевести в состояние "detached"). 
                Его можно получить с помощью pthread_create() или pthread_self().
        
        переводит поток в detached‑состояние: после его завершения ОС сразу освобождает все внутренние 
            ресурсы этого потока, и уже нельзя вызвать pthread_join для этого потока.

        в моем случае:
            pthread_detach(tid);

        https://help.kpda.ru/neutrino/2020/help/index.jsp?topic=%2Fru.kpda.doc.os_ru%2Fhtml%2Flibraries%2Flibc%2Fp%2Fpthread_detach.html
        https://www.opennet.ru/man.shtml?topic=pthread_detach&category=3&russian=2

    --------------------------------------------------------------------------------------------------------------------------------------------

    pthread_mutex_init
        int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);
            mutex - указатель на объект типа pthread_mutex_t, который будет инициализирован как мьютекс.
            attr - указатель на объект типа pthread_mutexattr_t, содержащий атрибуты мьютекса. 

        инициализирует мьютекс, используя атрибуты, указанные объектом атрибутов мьютекса attr. 
            Если attr равен NULL, то мьютекс инициализируется с атрибутами по умолчанию (см. pthread_mutexattr_init()). 
            После инициализации мьютекс находится в разблокированном состоянии.

        в моем случае: 
            queue_t* queue_init(int max_count) {
                ...
                pthread_mutex_init(&q->lock, NULL);
                ...
            }
        
        https://help.kpda.ru/neutrino/2020/help/index.jsp?topic=%2Fru.kpda.doc.os_ru%2Fhtml%2Flibraries%2Flibc%2Fp%2Fpthread_mutex_init.html
        https://www.opennet.ru/cgi-bin/opennet/man.cgi?topic=pthread_mutex_init
    
    pthread_mutex_destroy
        int pthread_mutex_destroy(pthread_mutex_t *mutex);
            mutex - указатель на объект типа pthread_mutex_t, который будет уничтожен.

        уничтожает незаблокированный мьютекс mutex. Уничтожить заблокированный мьютекс можно только 
            если вы являетесь владельцем этого мьютекса.

        в моем случае:
            void queue_destroy(queue_t *q) {
                ...
                pthread_mutex_destroy(&q->lock);
                ...
            }
        
        https://help.kpda.ru/neutrino/2020/help/index.jsp?topic=%2Fru.kpda.doc.os_ru%2Fhtml%2Flibraries%2Flibc%2Fp%2Fpthread_mutex_init.html
        https://www.opennet.ru/cgi-bin/opennet/man.cgi?topic=pthread_mutex_init
        
    pthread_mutex_lock
        int pthread_mutex_lock( pthread_mutex_t *mutex );
            mutex - указатель на объект типа pthread_mutex_t, который будет заблокирован.

        блокирует мьютекс mutex. Если мьютекс уже заблокирован, то вызывающий поток блокируется до тех пор, 
            пока он не захватит мьютекс. По возвращении из функции, объект мьютекса блокируется и принадлежит 
            вызывающему потоку.

        в моем случае:
            int queue_add(queue_t *q, int val) {
                pthread_mutex_lock(&q->lock);
                ...
            }
        
        https://help.kpda.ru/neutrino/2020/help/index.jsp?topic=%2Fru.kpda.doc.os_ru%2Fhtml%2Flibraries%2Flibc%2Fp%2Fpthread_mutex_init.html
        https://www.opennet.ru/man.shtml?topic=pthread_mutex_lock&category=3&russian=1

    pthread_mutex_unlock
        int pthread_mutex_unlock( pthread_mutex_t *mutex );
            mutex - указатель на объект типа pthread_mutex_t, который будет разблокирован.

        в моем случае: 
            int queue_add(queue_t *q, int val) {
                ...
                pthread_mutex_unlock(&q->lock);
            }

        разблокирует мьютекс mutex. Мьютекс должен принадлежать вызывающему потоку. Если в мьютексе есть 
            заблокированные потоки, ожидающий поток с наивысшим приоритетом разблокируется и становится 
            следующим владельцем мьютекса.

        https://help.kpda.ru/neutrino/2020/help/index.jsp?topic=%2Fru.kpda.doc.os_ru%2Fhtml%2Flibraries%2Flibc%2Fp%2Fpthread_mutex_init.html
        https://www.opennet.ru/cgi-bin/opennet/man.cgi?topic=pthread_mutex_unlock

    --------------------------------------------------------------------------------------------------------------------------------------------

    pthread_cond_init
        int pthread_cond_init( pthread_cond_t *cond, const pthread_condattr_t *attr );
            cond - указатель на инициализируемый объект pthread_cond_t.
            attr - NULL или указатель на объект pthread_condattr_t, определяющий атрибуты условной переменной. 

        инициализирует условную переменную cond с указанными атрибутами attr. Если attr равно NULL, cond инициализируется 
            со значениями атрибутов по умолчанию.

        https://help.kpda.ru/neutrino/2020/help/index.jsp?topic=%2Fru.kpda.doc.os_ru%2Fhtml%2Flibraries%2Flibc%2Fp%2Fpthread_cond_init.html
        https://www.opennet.ru/man.shtml?topic=pthread_cond_init&category=3&russian=4

    pthread_cond_wait
        int pthread_cond_wait( pthread_cond_t *cond, pthread_mutex_t *mutex );
            cond - указатель на объект pthread_cond_t, характеризующий условную переменную (condition variable) при 
                блокировании потоков.
            mutex - мьютекс, который будет разблокирован.

        блокирует текущий поток на условной переменной cond и разблокирует мьютекс, определяемый параметром mutex. 
            Поток, стремящийся выполнить ожидание на условной переменной, должен предварительно завладеть мьютексом 
            mutex. При возвращении управления из функции будет выполнен повторный захват мьютекса mutex текущим потоком.

        https://help.kpda.ru/neutrino/2020/help/index.jsp?topic=%2Fru.kpda.doc.os_ru%2Fhtml%2Flibraries%2Flibc%2Fp%2Fpthread_cond_init.html

    pthread_cond_broadcast
        int pthread_cond_broadcast( pthread_cond_t *cond );
            cond - указатель на объект pthread_cond_t, для которого необходимо разблокировать потоки.

        разблокирует ВСЕ потоки, ожидающие на условной переменной cond. Сама процедура разблокирования происходит 
            с учетом приоритетов. На одном уровне приоритетов потоки разблокируются в соответствии с принципом FIFO.

        https://help.kpda.ru/neutrino/2020/help/index.jsp?topic=%2Fru.kpda.doc.os_ru%2Fhtml%2Flibraries%2Flibc%2Fp%2Fpthread_cond_init.html

    --------------------------------------------------------------------------------------------------------------------------------------------

    strstr
        char *strstr(const char *str1, const char *str2)
            str1 - строка, в которой осуществляется поиск
            str2 - строка, которая ищется в str1
            
        в моем случае: 
            char* host_start = strstr(buffer, "Host: ");

        возвращает указатель на первое вхождение в строку, на которую указывает str1, строки, указанной str2 
            (исключая завершающий нулевой символ). Если совпадений не обна­ружено, возвращается NULL.

        https://www.c-cpp.ru/content/strstr-fstrstr

    strncpy
        char *strncpy(char *dest, const char *source, size_t count)
            dest - указатель на буфер, в который будет скопирована строка
            source - указатель на буфер, из которого будет скопирована строка
            count - максимальное количество символов, которое будет скопировано

        в моем случае:
            strncpy(host, host_start, host_len);

        копирование до count символов содержимого строки, на которую указывает source, в строку, на которую 
            указывает dest. Аргумент source должен быть указателем на строку, оканчивающуюся нулевым символом. 
            Функция strncpy() возвращает указа­тель на dest.

        https://www.c-cpp.ru/content/strncpy-fstrncpy

    strchr
        char *strchr(const char *str, int ch)
            str - указатель на строку, в которой осуществляется поиск
            ch - искомый символ

        в моем случае:
            char* port_ptr = strchr(host, ':');

        возвращает указатель на первое вхождение символа ch в строку, на которую указывает str. 
            Если символ ch не найден, возвращается NULL. 
        
        https://www.c-cpp.ru/content/strchr-fstrchr

    strtok

    strdup
        char *strdup(const char *str)
            str - указатель на строку, которую нужно скопировать.

        в моем случае: 
            loader->key = strdup(key);

        путем обращения к функции malloc() выделяет память, достаточную для хранения дубликата строки, 
            на которую указывает str, а затем производит копирование этой строки в выделенную область и 
            возвращает указатель на нее.

        https://www.c-cpp.ru/content/strdup-fstrdup

    gethostbyname
        struct hostent *gethostbyname(const char *name);
            name - имя интернет-хоста, запись которого требуется найти

        в моем случае: 
            struct hostent* server = gethostbyname(host);

        возвращает указатель на структуру struct hostent, описывающую Интернет-хост. Эта структура содержит 
            либо информацию, полученную от сервера имен, либо отдельные поля из строки в /etc/hosts.

        https://help.kpda.ru/neutrino/2020/help/index.jsp?topic=%2Fru.kpda.doc.os_ru%2Fhtml%2Flibraries%2Flibsocket%2Fg%2Fgethostbyname.html

    connect
        int connect(int s, const struct sockaddr *name, socklen_t namelen);
            s - дескриптор сокета, к которому следует инициализировать соединение
            name - имя сокета, к которому нужно подключиться для соединения SOCK_STREAM
            namelen - длина имени name, в байтах

        в моем случае:
            connect(server_fd, (struct sockaddr*)&server_addr, sizeof(server_addr))

        устанавливает соединение в соответствии с типом сокета, указанным в s:
            SOCK_STREAM - этот вызов пытается установить соединение с другим сокетом. Другой сокет определяется 
                именем name, которое является адресом в коммуникационном пространстве этого сокета. Каждое 
                коммуникационное пространство интерпретирует name по-своему.
            SOCK_DGRAM - задает одноранговый узел, с которым должен быть связан сокет. Это тот адрес, на который 
                должны отправляться датаграммы, и единственный, с которого должны приниматься датаграммы.

        https://help.kpda.ru/neutrino/2020/help/index.jsp?topic=%2Fru.kpda.doc.os_ru%2Fhtml%2Flibraries%2Flibsocket%2Fg%2Fgethostbyname.html

    read
        ssize_t read(int fildes, void *buf, size_t nbyte);
            fildes - дескриптор файла, из которого требуется считать информацию
            buf - указатель на буфер, в который будут записаны данные
            nbyte - количество байтов, которые требуется прочитать

        в моем случае:
            ssize_t bytes_read = read(client_fd, buffer, sizeof(buffer) - 1);

        пытается прочитать nbyte байт из файла, связанного с дескриптором открытого файла fildes, 
            в буфер, на который указывает buf.

        https://help.kpda.ru/neutrino/2020/help/index.jsp?topic=%2Fru.kpda.doc.os_ru%2Fhtml%2Flibraries%2Flibsocket%2Fg%2Fgethostbyname.html

    write
        ssize_t write(int fildes, const void *buf, size_t nbytes);
            fildes - дескриптор файла, в который требуется записать информацию
            buf - указатель на буфер, из которого требуется записать данные
            nbytes - количество байтов, которые требуется записать

        в моем случае:
            // пересылка запроса на конечный сервер
            write(server_fd, buffer, bytes_read);

        записывает nbytes байт в файл, дескриптор которого передан в fildes, из области памяти, 
            указатель на которую передан в buf.

        https://help.kpda.ru/neutrino/2020/help/index.jsp?topic=%2Fru.kpda.doc.os_ru%2Fhtml%2Flibraries%2Flibsocket%2Fg%2Fgethostbyname.html
    


    опишу логику работы многопоточного кэширующего HTTP-proxy:

        клиент подключается к прокси-серверу
        main() принимает подключение клиента (accept()), извлекает из HTTP-запроса клиента ключ и проверяет кэш на наличие этого ключа через cache_find(key):
            1) если есть, то создает клиентский поток handle_connection(), который читает HTTP-ответ из кэша и шлет данные из него в свой client_fd.
            2) если нет, создает запись в кэше (cache_add(key)) и создает поток-загрузчик (loader_thread()) + клиентский поток, которому пока НЕЧЕГО ЧИТАТЬ из кэша.
                загрузчик делает connect() с конечным сервером, пересылает туда исходный main-овский HTTP‑запрос, читает HTTP-ответ (read()-ом), 
                    записывает его кусочно в буфер entry->data, после каждого считанного и добавленного куска делает pthread_cond_broadcast(cd)
                пока загрузчик наполняет кэш, клиент в handle_connection просыпается от бродкаста на cd и и тут же шлёт свежеполученные данные в свой client_fd.
                когда загрузчик дойдет до конца ответа, он выставит entry->is_complete = 1 и ещё раз разбудит всех. Клиенты на этот раз поймут, 
                    что данных больше не будет и закончатся чистым close(client_fd).
            кэш хранит записи вида: 
                ключ: "имя_сервера:тип(GET,POST,...) URL-путь" <-> (пример) example.com:GET /courses/networks
                значение: HTTP-ответ:
                        1) строка статуса: HTTP/1.0 200 OK
                        2) строки заголовков: 
                            Header1: Value1
                            Header2: Value2
                        3) тело ответа...

        main
            создаю TCP сокет с протоколом IPv4
            после завершения работы сервера порт 80 сразу можно переиспользовать
            настраиваю адрес сервера - server_addr - указываю порт к которому будет привязан сокет
            bind() осущесвтляет привязку сокета к адресу
            connect()-ом начинаю прослушивать запросы клиентов на подклбчение 
            далее в цикле: 
                accept()-ом принимаю новые соединения от клиентов
                читаю HTTP-запрос
                извлекаю имя сервера, тип_запроса и URL-путь 
                формирую ключ в формате: "имя_сервера:тип_запроса(GET,POST,...) URL-путь" -> проверяю наличие этой записи в кэше:
                    1) cache hit
                        pthread_create()-ом создаю клиентский поток
                        поток будет читать данные из кэша и отправлять клиенту
                    2) cache miss
                        cache_add() создает новую запись в кэше
                        запускаю поток загрузчик loader_thread - он соединяется с целевым сервером, сохранит данные в кэш порциями
                        как и в cache hit, pthread_create()-ом создаю клиентский поток и он будет отправлять данные по мере их появления от loader_thread-а

        cache_find
            захватываю мьютекс глобального кэша - только один поток может читать/изменять структуру кэша:
                pthread_mutex_lock(&cache.mutex);
            перебираю все элементы кэша и в каждом проверяю что: элемент занят И с помощью strcmp() сравниваю его ключ с key. 
                если оба условия выполняются, то разблокирую мьютекс и возвращаю указатель на найденный элемент.
                Если запись не найдена после перебора всех элементов, просто разблокирую мьютекс и возвращаю NULL:
                for (int i = 0; i < MAX_CACHE_ENTRIES; i++) {
                    if (cache.entries[i] && strcmp(cache.entries[i]->key, key) == 0) {
                        pthread_mutex_unlock(&cache.mutex);
                        return cache.entries[i];
                    }
                }
                pthread_mutex_unlock(&cache.mutex);
                return NULL;
        
        cache_add
            выделяю память для нового элемента кэша, а далее заполняю поля начальными данными:
                ключ копируется с помощью strdup(),
                data - NULL (данных пока нема),
                size = 0 (текущтмй размер данных),
                capacity = 0 (максимальный размер данных/выделенная память),
                is_complete = 0 (флаг завершения),
                is_error = 0 (флаг ошибки),
                инициализация мьютекса и условной переменной для синхронизации:

                cache_entry_t *entry = malloc(sizeof(cache_entry_t));
                entry->key = strdup(key);
                entry->data = NULL;
                entry->size = 0;
                entry->capacity = 0;
                entry->is_complete = 0;
                entry->is_error = 0;
                pthread_mutex_init(&entry->mutex, NULL);
                pthread_cond_init(&entry->cond, NULL);
            перед изменением структуры кэша надо захватить мьютекс - только один поток может читать/изменять структуру кэша:
                pthread_mutex_lock(&cache.mutex);
            поиск свободного элемента в кэше (в cache_find() искал занятые, а теперь ищу свободный):    
                for (int i = 0; i < MAX_CACHE_ENTRIES; i++) {
                    if (!cache.entries[i]) {
                        cache.entries[i] = entry;
                        pthread_mutex_unlock(&cache.mutex);
                        return entry;
                    }
                }
            если не нашли свободный элемент, значит кэш заполнен и поэтому ищу самую старую запись и вытесняю ее, а именно:
                освобождаю то на что выше в функции выделял памяять: ключ, данные и саму запись:
                time_t oldest_time = cache.entries[0]->last_access;
                int oldest_index = 0;
                for (int i = 1; i < MAX_CACHE_ENTRIES; i++) {
                    if (cache.entries[i]->last_access < oldest_time && cache.entries[i]->is_complete) {
                        oldest_time = cache.entries[i]->last_access;
                        oldest_index = i;
                    }
                }
                free(cache.entries[oldest_index]->key);
                free(cache.entries[oldest_index]->data);
                free(cache.entries[oldest_index]);
                cache.entries[oldest_index] = entry;
            разблокирую мьютекс и возвращаю указатель на новый вставленный элемент:
                pthread_mutex_unlock(&cache.mutex);
                return entry;

        loader_thread
            делает 3 вещи: 
                1) устанавливает соединение с целевым сервером
                2) сохраняет полученные от него данные в кэш порциями
                3) после каждой порции уведомляет бродкастом клиентские потоки из handle_connection()

            1)
            из полученной параметром структуры извлекаю ключ и проверяю что он есть в кэше с помощью cache_find().
                Если он был удален, то очищаю data и выхожу, возвращая NULL:  
                loader_data_t *data = (loader_data_t *)arg;
                cache_entry_t *entry = cache_find(data->key);
                if (!entry) {
                    free(data->host);
                    free(data->request);
                    free(data);
                    return NULL;
                }
            получаю IP-адрес целевого сервера, разрешая его имя и если не получилось, то 
                устанавливаю флаг entry->is_error = 1 и broadcast() по условной переменной entry->cond. 
                Любой ждущий клиент проснётся, обнаружит измененный флаг is_error и завершит работу:
                struct hostent *server = gethostbyname(data->host);
                if (!server) {
                    pthread_mutex_lock(&entry->mutex);
                    entry->is_error = 1;
                    pthread_cond_broadcast(&entry->cond);
                    pthread_mutex_unlock(&entry->mutex);
                    goto cleanup;
                }
            создаю TCP сокет для соединения с конечным сервером:
                int server_fd = socket(AF_INET, SOCK_STREAM, 0);
                if (server_fd < 0) {
                    pthread_mutex_lock(&entry->mutex);
                    entry->is_error = 1;
                    pthread_cond_broadcast(&entry->cond);
                    pthread_mutex_unlock(&entry->mutex);
                    goto cleanup;
                }
            настраиваю адрес сервера server_addr - указываю порт и IP-адрес целевого сервера (версия IPv4):
                struct sockaddr_in server_addr;
                memcpy(&server_addr.sin_addr.s_addr, server->h_addr_list[0], server->h_length);
                server_addr.sin_family = AF_INET; // IP адрес к которому будет привязан сокет (IPv4)
                server_addr.sin_port = htons(data->port);
            устанавливаю соединение с конечным сервером через connect():
                if (connect(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
                    close(server_fd);
                    pthread_mutex_lock(&entry->mutex);
                    entry->is_error = 1;
                    pthread_cond_broadcast(&entry->cond);
                    pthread_mutex_unlock(&entry->mutex);
                    goto cleanup;
                }
            пересылка http-запроса клиента на конечный сервер:
                if (write(server_fd, data->request, data->request_len) < 0) {
                    close(server_fd);
                    pthread_mutex_lock(&entry->mutex);
                    entry->is_error = 1;
                    pthread_cond_broadcast(&entry->cond);
                    pthread_mutex_unlock(&entry->mutex);
                    goto cleanup;
                }
            2)+3)
            ЧТЕНИЕ HTTP-ОТВЕТА+сохранение в кэш: захват мьютекса элемента кэша, чтобы не было ситуации, когда два потока одновременно 
                попытаются обновить один и тот же элемент кэша: 
                pthread_mutex_lock(&entry->mutex);
            на каждой итерации цикла записываю sizeof(buffer) байтов из сокета в буфер buffer. 
                Если свободного места в текущем буфере < bytes_read, делаем realloc() с новой capacity, обновляя значения entry->data и 
                    entry->capacity соответственно.
                после каждой bytes_read порции считанных байт: 
                    memcpy() копирует новые байты в entry->data + entry->size (ьуфер кэша)
                    увеличивается entry->size на сколько прочитал
                    pthread_cond_broadcast() пробуждает всех клиентов которые в handle_connection() ждут появления данных:
                while (bytes_read = read(server_fd, buffer, sizeof(buffer))) {
                    if (bytes_read < 0) break;
                    
                    if (entry->size + bytes_read > entry->capacity) {
                        size_t new_capacity = entry->capacity * 2;
                        if (new_capacity < entry->size + bytes_read) {
                            new_capacity = entry->size + bytes_read + BUFFER_SIZE;
                        }
                        
                        char *new_data = realloc(entry->data, new_capacity);
                        if (!new_data) break;
                        
                        entry->data = new_data;
                        entry->capacity = new_capacity;
                    }
                    
                    memcpy(entry->data + entry->size, buffer, bytes_read);
                    entry->size += bytes_read;

                    pthread_cond_broadcast(&entry->cond);
                }
            загрузка в кэш завершена - оповещаю ждущие потоки, потом отпускаю мьютекс и закрываю server_fd:
                entry->is_complete = 1;
                pthread_cond_broadcast(&entry->cond);
                pthread_mutex_unlock(&entry->mutex);
                
                close(server_fd);

        handle_connection
            параметром получил структуру client_data_t*, содержащую: client_fd-сокет клиента и key-ключ кэша для запрошенного ключа
            ищу запись в кэше по ключу key через cache_find()
            мьютекс элемента кэша блокируется + инициализируется счетчик отправленных байт (sent = 0)
            далее в цикле: 
                отправка write()-ом непосланных данных (коих entry->size - sent), 
                    если загрузка http-ответа завершена (is_complete) или произошла ошибка (is_error), выхожу из цикла
                жду уведомления от loader_thread что появились новые данные от конечного сервера (pthread_cond_wait())
            если остались оставшиеся данные то отправляю их клиенту write()-ом
            кинець - разблокировка мьютекса элемента кэша, закрытие сокета client_fd, return.

        ! взаимодействие потоков handle_connection и loader_thread:
            handle_collection                        loader_thread
            1)  lock(entry->mutex)
                sent = 0
                pthread_cond_wait()
            2)                                      lock(entry->mutex)
                                                    добавление данных в entry->data
                                                    pthread_cond_broadcast()
                                                    unlock(entry->mutex)
            3)  проснется
                отправка write()-ом данных
                pthread_cond_wait()
            4)                                      lock(entry->mutex)
                                                    добавление данных в entry->data
                                                    pthread_cond_broadcast()
                                                    entry->is_complete = 1;
                                                    pthread_cond_broadcast()
                                                    unlock(entry->mutex)
            5)  проснется 
                отправка write()-ом данных
                обнаруживает entry->is_complete = 1
                отправка write()-ом остаточных данных
                unlock(entry->mutex)
                
        